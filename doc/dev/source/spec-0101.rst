SPEC0101: Attribution
=====================
 
  :Reference: https://blueprints.launchpad.net/fctest/+spec/test-attributes 
  :Type: Specification
  :Author: Ian Blumel <ian DOT blumel at gmail DOT com>
  :Status: Active

--------
Overview
--------

Attribution is a helpful way for allow one to specify meta data on a FCT
feature. This specification discusses the methods for attributing the following
FCT features,

  - **FCT**
  - **FCT_SUITE**
  - **FCT_TEST**

the attribute method is fully inheritable, and will allow one to specify
key-value pairs, where the values can be a potential list of values. All
attributes are specified in string format, and there will be an ability to
specify macro constants instead.
 
----------
Motivation
----------

The main motivation for this specification is :doc:`spec-0100`. We want to be
able to have a way to say: "only run tests with a certain attribute". 

This specification discusses the potential attribution of anything within the
FCTest universe.

-------
Details
-------

Where to Attribute
------------------

The basic ingredients for any FCTest are as follows,

.. code-block:: c

    FCT_BGN()
    {
       FCT_SUITE_BGN(simple)
       {
	  FCT_TEST_BGN(strcmp_eq)
	  {
	     fct_chk(strcmp("durka", "durka") == 0);
	  }
	  FCT_TEST_END();

	  FCT_TEST_BGN(chk_neq)
	  {
	     fct_chk(strcmp("daka", "durka") !=0 );
	  }
	  FCT_TEST_END();
       }
       FCT_SUITE_END();
    }
    FCT_END();

in the above example we can consider attributing the following features,

   - **FCT_BGN**: This would be an attribute for ALL tests and tests suites
     found under it.
   - **FCT_SUITE_BGN**: This would be an attribute applicable to all tests.
   - **FCT_TEST_BGN**: This would be an attribute applicable to a particular
     test.
   - **fct_chk**: This is the actual test itself.

If we have attribution we should allow the attributes to be inherited down from FCT -> FCT_SUITE -> FCT_TEST.

I am loathe to include "fct_chk" in attribution chain since it wouldn't make
sense to attribute one check and not another. I would prefer that if you wanted
to break checks up with attributes that you simply break your checks down into
separately attributed FCT_TEST features instead.

Attribute Inheritance
---------------------

Attribute inheritance follows these rules.

  1. Attributes are inherited in this order: FCT -> FCT_SUITE -> FCT_TEST.
  2. Attributes in lower features *override* attributes in higher features.

Thus if you defined "author=ib" in FCT, and then defined "author=vh" in
FCT_SUITE. You will not have "author=ib,vh", instead you will have "author=vh".
This is to maintain a little sanity and order as we pass attributes down
through the feature chain.

Attribute Definitions
---------------------

Defining attributes will be a straightforward. The attributes are key-value
pairs. Where the value could be a list of string values. So for example::

    level=1,2,3

implies that a check if the level is P1 or P2 or P3 would succeed. You can
declare more than one key-value pair by using the semi-colon, as in::

    author=IB;level=1,2

to help reduce error via string typing we are going to allow::

    author=IB;level=1;level=2

as a valid string that is equivalent to the proceeding example. Thus you could
write some code as follows:

.. code-block:: c

    #define AUTHOR_IB "author=IB;"
    #define LEVEL_1   "level=1;"
    #define LEVEL_2   "level=2;"

and then a string like::

    author=IB;level=1;level=2

would become::

    AUTHOR_IB LEVEL_1 LEVEL_2

where the trailing semi-colon in LEVEL_2 would simply be ignored. This avoids
the case where you would accidentally mistype "level" as "lvl" or "lelvl", &c.

To maintain a modicum of sanity all key-value pairs testing are case
insensitive. I don't want to get into issues where you silently are unable to
match between "Level" and "level".

Example
-------

Below is an example where we want to give LEVEL attributes to our tests. To
make the example interesting we will also attribute the tests with the author
name.

.. code-block:: c

    #include "fct.h"

    #define AUTH_IB   "author=ib;"
    #define AUTH_VH   "author=vh;"
    #define AUTH_OP   "author=op;"
    #define LVL_1     "level=1;"
    #define LVL_2     "level=2;"
    #define DUR_LONG  "duration=long;"
    #define DUR_SHORT "duration=short;"
    
    FCT_BGN2(AUTH_IB)
    {
       FCT_SUITE_BGN2(simple, AUTH_VH LVL_1 )
       {
          FCT_TEST_BGN2(smoke, LVL_1 DUR_SHORT AUTH_IB)
          {
             fct_chk(does_it_start());
	  }

	  FCT_TEST_BGN2(long_test, LVL_2 DUR_LONG)
	  {
	     fct_chk(really_long_func());
	  }
	  FCT_TEST_END();
       }
       FCT_SUITE_END();
    }
    FCT_END();

in the above example all tests would initially default to AUTH_IB. The "simple"
suite would then override that initial default and instead all tests would
default to AUTH_VH. However "smoke" would be written by AUTH_IB and  

So in the above example we should be able to construct a means for say: "only
run level 1" tests or "only run 'short' tests."
