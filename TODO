====
TODO
====

Milestone 1.0 (First Release)
=============================

- Add a command line "parser" object, 
  - Parse and keep track of all the command line.
  - Available via the kernel?

- Set the logger? Via the command line. 
  --logger-minimal      (-lm)
  --logger-standard     (-ls)
  --logger-verbose      (-lv)    

- Better loggers:
  - minimal ( "." and "!" )
      - on_cndtn_pass
      - on_cndtn_fail
      - on_test_start
      - on_test_end
      - on_test_suite_start
      - on_test_suite_end
      - on_nut_start
      - on_nut_end
  - verbose 
      - on_cndtn_pass
      - on_cndtn_fail
      - on_test_start
      - on_test_end
      - on_test_suite_start
      - on_test_suite_end
      - on_nut_start
      - on_nut_end  

- Should be able to "include" other test suites from other files. In
  other words you should be able to do this,

  BEGIN_TEST_SUITE()
  {
     #include "test_suite_a.h"
     #include "test_suite_b.h"
  }
  END_TEST_SUITE();

  I think you can do this now, but need to write up a test case.

- Write up documentation.
  - Finish up the "test_money" class.

- Start a README file.
  - Include "Goal"

- Chase down all "###" and "TODO" comments, and fix them.

- Test naming conflicts, what happens when two test suites have the same
  name??

Milestone 1.1 (Cleanup)
=======================

- (P1) Start a CHANGES file.

- (P1) Write a "manual" check list to make sure everything is working
  correctly.  Some tests are impossible to test without running it, and
  requires a manual check.

  - Added a "check.bat" that compiles and executes all the tests in both
    release and debug mode.

- (P1) Write a HACKING file.
  - Include "Basic Idea"
  - Write up a little documentation on the "design" of the framework. A
    HACKING guide.

- (P1) Port "fct_timer" to other operating systems.

- (P1) Test with other compilers
  - gcc?

- (P1) Start up a "SCONS" project, or at least look into it.

- (P1) Run only a specific test suite by name,

      nut.exe --run-suite some_suite

- (P2) Better command line parsing. 
  - Need to implement the --help and --version options.

- Move all the SLN and VCPROJ files into a sub-directory called "win32",
  just to seperate the code from the "make files".

- Clean up the code. Consistency throughout.

- Create a sample makefile.

MileStone 1.2 (Stabilize)
========================

- Hack, hack, hack until we have a very stable release.


Milestone 1.3 (Major Enhancements)
==================================

- (P3) Make the NList GROWTH rate proportional to its size. The bigger
  the list, the less it has to grow (i.e. the less likely more stuff
  will be added). 

- (P1) Handle assertions -- keep on "trucking".

- (P1) Handle assertions -- optionally check for them.

- (P1) Handle "crashes" -- keep on "trucking".

- (P1) Handle "crashes" -- optionally confirm a crash?? Might be a
  completely useless option.

- (P2) Handle different languages for the built-in loggers.

- Figure out a way to have a test case without a test suite?

    NUT_SUITE_BEGIN(Testing)
    {
       NUT_CHECK( ok );    // This should fail, with a hint!
    }
    NUT_SUITE_END()

- Be able to just create a bunch o' NUT_TEST_BEGIN/NUT_TEST_END's and
  get an automatic "default test suite" wrapped around it.

