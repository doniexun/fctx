/*
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
WARNING: This file is autogenerated from a template "test_cl_customize.c.in",
you may or may not want to edit this file. 
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Testing the custom command line parser. This file is a template file for
handling different configurations. We need to be able to test with and without
a configuration setting and the easiest way to do this is to generate different
files.

====================================================================
Copyright (c) 2008 Ian Blumel.  All rights reserved.

This software is licensed as described in the file LICENSE, which
you should have received as part of this distribution.
====================================================================
File: test_cl_customize.c.in 
*/


#include "fct.h"

static fctcl_init_t my_options[] = {
    {"--flag", "-f",  FCTCL_STORE_TRUE, "Test boolean flag."}, 
    {"--value", "-v", FCTCL_STORE_VALUE, "Test store value."}, 
    FCTCL_INIT_NULL
};

/* Configuration settings configured by cmake. */
#cmakedefine CL_USE_FLAG
#cmakedefine CL_USE_VALUE
#define CL_PASSED_IN_VALUE "@CL_PASSED_IN_VALUE@"
#define CL_USE_NAME        "@CL_USE_NAME@"

FCT_BGN()
{
    int g_is_flag =-1;
    char const *g_value =NULL;
    
    fctcl_install(my_options);

    /* Want to make sure a parse happens AFTER the my_options. */
    g_is_flag = fctcl_is("--flag");
    g_value = fctcl_val("--value");
    
    /* -------------------------------------------------------------------- */
    FCT_QTEST_BGN(test_flag) {
        int is_flag = fctcl_is("--flag");
#if defined(CL_USE_FLAG)
        fct_chk( is_flag );
        fct_chk( g_is_flag );
#else
        fct_chk( !is_flag);
        fct_chk( !g_is_flag );
#endif /* CL_USE_FLAG */
    } FCT_QTEST_END();


    /* -------------------------------------------------------------------- */
    FCT_QTEST_BGN(test_value) {
        char const *val = fctcl_val2("--value", NULL);
#if defined(CL_USE_VALUE)
        fct_chk_eq_str(val, CL_PASSED_IN_VALUE);
        fct_chk_eq_str(g_value, CL_PASSED_IN_VALUE);
#else
        fct_chk_neq_str(val, CL_PASSED_IN_VALUE);
        fct_chk_neq_str(g_value, CL_PASSED_IN_VALUE);
#endif /* CL_USE_VALUE */
    } FCT_QTEST_END();

    /* -------------------------------------------------------------------- */
    FCT_QTEST_BGN(test_value_def_string) {
#define DEFAULT_STRING "default_string"
        char const *val = fctcl_val2("--value", DEFAULT_STRING);
#if defined(CL_USE_VALUE)
        fct_chk_eq_str(val, CL_PASSED_IN_VALUE);
        fct_chk_eq_str(g_value, CL_PASSED_IN_VALUE);
#else
        fct_chk_eq_str(val, DEFAULT_STRING);
        /* Here we need to test that value is NULL, since we acquire the
        global value via the fctcl_val function, not the v2 variant that
        accepts a default value. */
        fct_chk( g_value == NULL );
#endif /* CL_USE_VALUE */
    } FCT_QTEST_END();
    
}
FCT_END();
